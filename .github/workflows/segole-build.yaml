name: Segole Service Build

on:
  push:
    paths:
      - 'app/**'
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd app
          
          # Login to docker & Building new image
          docker login -u ${{ secrets.DOCKER_REPO_USERNAME }} -p ${{ secrets.DOCKER_REPO_PASSWORD }}
          
          BASE_IMAGE_NAME=maayanassraf/segole
          TAGGED_IMAGE_NAME=$BASE_IMAGE_NAME:v1.${{ github.run_number }}
          docker build -t $TAGGED_IMAGE_NAME -t $BASE_IMAGE_NAME:latest .
          docker push $BASE_IMAGE_NAME --all-tags
          
          
          #!/bin/bash

          # Define the image name (without tag)
          IMAGE_NAME=maayanassraf/segole

          # Pull the image with the "latest" tag
          docker pull $IMAGE_NAME:latest

          # Get the Image ID of the latest tag
          IMAGE_ID=$(docker inspect --format '{{.RepoDigests}}' $IMAGE_NAME:latest | cut -d "@" -f2 | sed 's/.$//')

          # Query Docker Hub to find all tags for this image using the Docker Hub API
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/")

          # Use jq to filter and display tags and match the image ID with tags
          echo "Tags for image '$IMAGE_NAME' on Docker Hub:"
          TRUE_TAG=$(echo "$TAGS" | jq -r '.results[] | select(.images[].digest == "'$IMAGE_ID'") | .name' | grep ^[0-9])
          
          # Split the version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "$TRUE_TAG"

          # Increment the patch version
          ((patch++))

          # Reconstruct the version string
          new_version="$major.$minor.$patch"

          # Output the new version
          echo "$new_version"