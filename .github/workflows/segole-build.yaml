name: Segole Service Build

on:
  push:
    paths:
      - 'app/**'
    branches:
      - master
env:
  BASE_IMAGE_NAME: maayanassraf/segole
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Get from docker hub latest image
        id: get_info
        run: |
          cd app
          
          # Login to docker
          docker login -u ${{ secrets.DOCKER_REPO_USERNAME }} -p ${{ secrets.DOCKER_REPO_PASSWORD }}
          
          # Pull the image with the "latest" tag
          docker pull ${{ env.BASE_IMAGE_NAME }}:latest
          
          # Get the Image ID of the latest tag
          IMAGE_ID=$(docker images --filter=reference="${{ env.BASE_IMAGE_NAME }}:latest" --format "{{.ID}}")
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT

          # Inspect the image for labels or metadata that indicate its version
          VERSION=$(docker inspect --format '{{ index .Config.Labels "version" }}' $IMAGE_ID)
          VERSION=$(echo $VERSION | cut -d ":" -f2)
          echo VERSION=$VERSION >> $GITHUB_OUTPUT

      - name: Increment latest tag & LABEL instruction by 1 (patch only)
        id: new_version
        run: |
          # Split the version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "${{ steps.get_info.outputs.VERSION }}"

          # Increment the patch version
          ((patch++))

          # Reconstruct the version string
          NEW_VERSION="$major.$minor.$patch"

          # Output the new version
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Edit Dockerfile - LABEL instruction
        run: |
          sed -i 's/^LABEL version="[^"]*"/LABEL version="'$VERSION'"/'  app/Dockerfile

      - name: Builds new image with the '$NEW_VERSION' parameter as tag
        run: |
          cd app 
          
          TAGGED_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }}:${{ steps.new_version.outputs.NEW_VERSION }}
          
          # Builds new image with latest tag & new 'actual version' tag
          docker build -t $TAGGED_IMAGE_NAME -t $BASE_IMAGE_NAME:latest .
          
          # Login to docker
          docker login -u ${{ secrets.DOCKER_REPO_USERNAME }} -p ${{ secrets.DOCKER_REPO_PASSWORD }}
          
          # Push image to docker hub
          docker push $BASE_IMAGE_NAME --all-tags
