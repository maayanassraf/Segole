name: Segole Service Build Minor Version

# Configure Manual Trigger
on:
  workflow_dispatch:

env:
  BASE_IMAGE_NAME: maayanassraf/segole

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Get from docker hub latest image & inspect his 'true' version
        id: get_info
        run: |
          # Pull the image with the "latest" tag
          docker pull ${{ env.BASE_IMAGE_NAME }}:latest
          
          # Get the Image ID of the latest tag
          IMAGE_ID=$(docker images --filter=reference="${{ env.BASE_IMAGE_NAME }}:latest" --format "{{.ID}}")

          # Inspect the image for labels that indicate its version
          VERSION=$(docker inspect --format '{{ index .Config.Labels "version" }}' $IMAGE_ID)
          
          # Saves the version as number only
          VERSION=$(echo $VERSION | cut -d ":" -f2)
          
          # Saves the version to GITHUB_OUTPUT for using it in next steps
          echo VERSION=$VERSION >> $GITHUB_OUTPUT
          
          echo "The current latest image version is: $VERSION"
      - name: Increment latest tag & LABEL instruction by 1 (minor only & set patch to 0)
        id: new_version
        run: |
          # Split the version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "${{ steps.get_info.outputs.VERSION }}"

          # Reset patch to 0
          patch=0
          
          # Increment minor by 1
          ((minor++))

          # Reconstruct the version string
          NEW_VERSION="$major.$minor.$patch"

          # Saves the new version to GITHUB_OUTPUT for using it in next steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "The new image version will be created is: $NEW_VERSION"

      - name: Edit Dockerfile - LABEL instruction
        run: |
          # Changes the LABEL in Dockerfile to tne new version
          sed -i 's/^LABEL version="[^"]*"/LABEL version="'${{ steps.new_version.outputs.NEW_VERSION }}'"/'  app/Dockerfile
          
          cat app/Dockerfile | grep ${{ steps.new_version.outputs.NEW_VERSION }}

#      - name: Builds new image with the '$NEW_VERSION' parameter as tag
#        run: |
#          cd app
#
#          TAGGED_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }}:${{ steps.new_version.outputs.NEW_VERSION }}
#
#          # Builds new image with latest tag & new 'actual version' tag
#          docker build -t $TAGGED_IMAGE_NAME -t $BASE_IMAGE_NAME:latest .
#
#          # Login to docker
#          docker login -u ${{ secrets.DOCKER_REPO_USERNAME }} -p ${{ secrets.DOCKER_REPO_PASSWORD }}
#
#          # Push image to docker hub
#          docker push $BASE_IMAGE_NAME --all-tags

#      - name: Changes the main.yaml file with the new tag version & commit
#        run: |
#          # changes in the main.yaml file the tag variable value
#          sed -i 's/tag: [^ ]*/tag: '" ${{ steps.new_version.outputs.NEW_VERSION }}"'/g' deployment/main.yaml
#
#          git config --global user.name "github_segole"
#          git config --global user.email "github_segole@noreply.com"
#
#          git add deployment/main.yaml
#          git commit -m "change tag version to: ${{ steps.new_version.outputs.NEW_VERSION }} in the deployment/main.yaml"
#          git push